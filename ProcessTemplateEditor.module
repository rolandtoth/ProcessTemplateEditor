<?php

/**
 * Template Editor
 * @author Nico Knoll "nico"
 * @link http://nico.is
 *
 * ProcessWire 2.x
 * Copyright (C) 2010 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */
class ProcessTemplateEditor extends Process implements Module, ConfigurableModule {

    public static function getModuleInfo() {
        return array(
            'title'    => 'Template Editor',
            'version'  => '1.6.1',
            'summary'  => __('Change the template files on the fly.'),
            'singular' => true,
            'autoload' => false,
            'author'   => 'Nico Knoll',
            'page'     => array(
                'name'   => 'template-editor',
                'parent' => 'setup',
                'title'  => __('Template Editor')
            )
        );
    }


    private $fileError;


    // Initialize the module
    public function init() {
        parent::init();
        ini_set('auto_detect_line_endings', true);
    }


    static private function getDefaults() {
        return array(
            'inputfieldClass' => 'InputfieldTextarea'
        );
    }


    public function __construct() {
        foreach (self::getDefaults() as $key => $value) {
            $this->$key = $value;
        }
    }


    /**
     * Executive functions
     *
     */

    // Shows a list of the templates
    public function ___execute() {
        $table = $this->markupFileTable();

        return $table;
    }

    // this function returns the markup for the file table
    private function markupFileTable() {
        // generate table
        $table = $this->modules->get('MarkupAdminDataTable');
        $table->setSortable(false);
        $table->setEncodeEntities(false);
        $header = array($this->_('Name'));

        // we get all files from the template folder + .modules from sitemodules
        $files = $this->rglob('*.*', 0, $this->config->paths->templates);
        $files = array_merge($files, $this->rglob('*.module', GLOB_BRACE, $this->config->paths->siteModules));
//        $files = array_merge($files, $this->rglob('*.{module,php,inc,css,js,md}', GLOB_BRACE, $this->config->paths->siteModules));

        if (count($files)) {
            foreach ($files as $file) {
                if ($file) {
                    // add file to table
                    $table->row(array(
                        $this->make_link($this->basename_relative($file))
                    ));
                }
            }
        }

        return $table->render();
    }


    // Shows edit form
    public function ___executeEdit() {

        $this->fuel('breadcrumbs')->add(new Breadcrumb('../', $this->_('Template Editor')));
//        $this->setFuel('processHeadline', $this->_("Edit Template"));

        $filename = $this->sanitizer->text($this->basename_relative($this->input->get->file));

        $file = $this->config->paths->root . $filename;

        if (!is_file($file)) {
            throw new WireException($this->_("File not found"));
        }

        $content  = '';
        $filetype = $this->get_mime_type($file);

        if ($filetype == 'text' || $filetype == 'inode') {
            if ($handle = @fopen($file, 'r+')) {
                $content = ((filesize($file) > 0) ? fread($handle, filesize($file)) : '');
                fclose($handle);
            } else {
                $this->error($this->_('Permission denied to open this file. Please give the file "' . basename($file) . '" write permissions.'));
                $this->fileError = true;
            }
        }

        $this->setFuel('processHeadline', sprintf($this->_("Edit file: %s"), $filename));


        return $this->buildForm($this->input->get('file'), $content);

    }

    // helper function which creates the form for the executeEdit() function
    protected function buildForm($filename, $filecontent) {

        $form         = $this->modules->get("InputfieldForm");
        $form->method = 'post';
        $form->action = '../save/';

        $fieldsetLeft              = $this->modules->get("InputfieldFieldset");
        $fieldsetLeft->collapsed   = Inputfield::collapsedNo;
        $fieldsetLeft->columnWidth = "75%";
        $form->add($fieldsetLeft);

        $f        = $this->modules->get("InputfieldText");
        $f->name  = 'file_name';
        $f->label = $this->_('Name');
        $f->attr('value', basename($filename));
        $f->notes     = $this->_('Be careful with this. If you\'re changing the file name you probably have to change the template\'s name manually, too.');
        $f->collapsed = Inputfield::collapsedNo;
        $fieldsetLeft->add($f);


        // If this is a text file show text - otherwise display the image or video or whatever
        if (!$this->fileError) {

            // $filename doesn't contain the full path
            $filetype = $this->get_mime_type($this->config->paths->root . $filename);

            if ($filetype == 'text' || ($filetype == 'inode' && strlen($filecontent) == 0)) {
                $f              = $this->modules->get($this->inputfieldClass);
                $f->name        = 'file_content';
                $f->label       = $this->_('Content');
                $f->description = ((strlen($filecontent) == 0) ? $this->_('File is empty so no media type could be detected.') : '');
                $f->collapsed   = Inputfield::collapsedNo;
                $f->value       = $filecontent;
                $f->rows        = 30;
                $fieldsetLeft->add($f);
            } else {
                switch ($filetype) {
                    default:
                        $fieldvalue = sprintf($this->_('<p>Preview doesn\'t support "%s" media type.'), $filetype);
                        break;
                    case 'image':
                        $fieldvalue = '<img style="max-width:100%;height:auto;" src="' . $this->config->urls->root . $filename . '">';
                        break;
                    case 'audio':
                        $fieldvalue = '<audio style="max-width:100%;" src="' . $this->config->urls->root . $filename . '" preload="auto" controls>
							' . $this->_('<p>Your browser doesn\'t support the audio tag or the given file format.</p>') . '				
						</audio>';
                        break;
                    case 'video':
                        $fieldvalue = '<video style="max-width:100%;height:auto;" src="' . $this->config->urls->root . $filename . '" preload="auto" controls>
							' . $this->_('<p>Your browser doesn\'t support the video tag or the given file format.</p>') . '				
						</video>';
                        break;
                }


                $f            = $this->modules->get("InputfieldMarkup");
                $f->name      = 'file_preview';
                $f->label     = $this->_('Preview');
                $f->collapsed = Inputfield::collapsedNo;
                $f->value     = '<div style="width:100%;float:left;">' . $fieldvalue . '</div>';
                $fieldsetLeft->add($f);

                $f        = $this->modules->get("InputfieldHidden");
                $f->name  = 'file_preview_url';
                $f->label = 'Preview Helper';
                $f->value = $filename;
                $fieldsetLeft->add($f);
            }


            $f       = $this->modules->get("InputfieldHidden");
            $f->name = 'file_name_original';
            $f->attr('value', $filename);
            $fieldsetLeft->add($f);

            $f = $this->modules->get("InputfieldButton");
            $f->type  = 'submit';
            $f->id    = 'file_submit';
            $f->value = $this->_('Save file');
            // add support for AdminOnSteroids ctrl+s
            $f->addClass('aos_hotkeySave');
            $fieldsetLeft->add($f);

        }

        $fieldsetRight              = $this->modules->get("InputfieldFieldset");
        $fieldsetRight->collapsed   = Inputfield::collapsedNo;
        $fieldsetRight->columnWidth = "25%";
        $form->add($fieldsetRight);

        $f            = $this->modules->get("InputfieldMarkup");
        $f->name      = 'file_table';
        $f->label     = $this->_('Template Files');
        $f->collapsed = Inputfield::collapsedNo;
        $f->value     = $this->markupFileTable();
        $fieldsetRight->add($f);


        return $form->render();
    }


    // Save the changes
    public function ___executeSave() {

        $renameSuccess = true;

        // get changed file and throw error if it doesn't exist

        $filename = $this->sanitizer->text($this->basename_relative($this->input->post('file_name_original')));

        $file = $this->config->paths->root . $filename;

        if (!is_file($file)) {
            throw new WireException($this->_("File not found"));
        }

        // only change file if it has mime type "text" (means file_preview_url is not defined)
        if ($this->input->post('file_preview_url') == '') {
            $handle  = fopen($file, 'w+');
            $content = fwrite($handle, $this->input->post('file_content'));
            fclose($handle);
        }

        // create new filename because it could be changed
        $filename = dirname($this->input->post('file_name_original')) . '/' . $this->input->post('file_name');

        // check if it is changed and rename the file in case it is
        if ($filename != $this->input->post('file_name_original')) {
            $renameSuccess = rename($this->config->paths->root . $this->input->post('file_name_original'), $this->config->paths->root . $filename);
        }

        // return to either the original file name if not changed or if it can't be renamed return to original file name
        if ($renameSuccess) {
            $this->message($this->_('File saved successfully.'));
            $this->session->redirect('../edit/?file=' . $filename);
        } else {
            $this->error($this->_('File could not be renamed.'));
            $this->session->redirect('../edit/?file=' . $this->input->post('file_name_original'));
        }

    }


    static public function getModuleConfigInputfields(array $data) {
        $inputfields = new InputfieldWrapper();
        $defaults    = self::getDefaults();
        $data        = array_merge($defaults, $data);

        $f = wire('modules')->get('InputfieldSelect');
        $f->attr('name', 'inputfieldClass');
        $f->label       = 'Inputfield Type';
        $f->description = "The type of field that will be used to collect input (Textarea is the default). ";
        $f->required    = true;
        $f->value       = $data['inputfieldClass'];

//        $baseClass = "InputfieldTextarea";
        $baseClass = "InputfieldTextarea";
        foreach (wire('modules')->find("className^=Inputfield") as $fm) {
            if ("$fm" == $baseClass || is_subclass_of("$fm", class_exists('ProcessWire\\InputfieldTextarea') ? "ProcessWire\\" . $baseClass : $baseClass)) {
//            if ("$fm" == $baseClass || is_subclass_of("$fm", $baseClass)) {
                $f->addOption("$fm", str_replace("Inputfield", '', "$fm"));
            }
        }

        $inputfields->append($f);

        return $inputfields;

    }


    /**
     * Helper
     *
     **/

    // removes root path from the file path
    private function basename_relative($path) {

        $root = $this->config->paths->root;

        return str_replace($root, '', $path);
    }


    // splits the path and only links the file name but returns the full path including the link afterwards
    private function make_link($path) {
        $path_split = explode('/', $path);
        $basename   = array_pop($path_split);
        $new_path   = implode(' / ', $path_split) . ((count($path_split) > 0) ? ' / ' : '');

        return '<span title="' . $new_path . '" style="font-size:10px;">' . $new_path . '</span>
		        <a href="' . $this->page->url . 'edit/?file=' . $path . '">' . $basename . '</a>';
    }


    // Recursive glob() function to find all files in the template folder
    private function rglob($pattern = '*', $flags = 0, $path = '') {
        $paths = @glob($path . '*', GLOB_MARK | GLOB_ONLYDIR | GLOB_NOSORT);
        $files = array();
        $files = @glob($path . $pattern, $flags);
        sort($files);

        foreach ($paths as $path) {
            $files = @array_merge((array) $files, (array) $this->rglob($pattern, $flags, $path));
        }

        foreach ($files as $key => $file) {
            if ($file == '' || $file == false || !$file) {
                unset($files[ $key ]);
            }
        }

        return $files;
    }


    // Not every PHP installation supports this function, so we created a custom version
    private function get_mime_type($filename) {

//        $filename = $this->config->paths->root . $filename;

        $finfo    = finfo_open(FILEINFO_MIME_TYPE);
        $fileinfo = finfo_file($finfo, $filename);
        $filetype = dirname($fileinfo);
        finfo_close($finfo);

        return $filetype;
    }

}
